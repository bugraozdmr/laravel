#############  COURSE #############

-- GEREKLILIKLER
/*
COMPOSER
XAMPP
VS CODE
*/

// yeni keyboard zorluyor :D %60 almayın :/

## Extensions
- Laravel extension Pack (GENEL olarak çok fazla şey içeriyor iyidir DOTENV...)
- Laravel Blade Spacer ( Code formatlama için gerekli )
- PHP Intelephense

#-# extension pack ile gelen birkaç extension siliniyor :: DevDb gereksiz, EditorConfig for VS Code gereksiz

## .vscode ile custom configuration eklemiş oluyoruz ( Daha fazla ayar eklenebilir )
Burda font size ayarı vs. iyi

#### COMPOSER LARAVEL PROJE OLUSTURMA --> bu composer ile projeyi indirir
composer create-project laravel/laravel example-app

## projeyi çalıştırmak (once cd ile icine gir)
php artisan serve

## LARAVEL default olarak sqlite ile gelir
.env içinde driver'i değiştir mysql ile aynı şu şekil
#####
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3307
DB_DATABASE=laravel
DB_USERNAME=grant
DB_PASSWORD=grant345
#####

# Sonra seedi insert etmek gerek ( kokte olman gerektigini unutma )
php artisan migrate

# php artisan çokça komuta sahip bunları kullanmak işimizi baya bir kolaylaştırır
- php artisan yapıp enterlayınca tüm komutları listelemiş oluruz
- php about ile uygulama hakkında tüm bilgiler gelir
- inspire ile güzel sözler çeker

# sevdiğim komutlar
- php artisan about
- php artisan inspire

# yeni bir view oluşturma
php artisan make:view home

# klosor altında view olusturma (klosor var olmak zorunda değil)
php artisan make:view about/index

# yeni controller oluşturma
php artisan make:controller HomeController

## Yeni model oluşturma artisan kullanarak
php artisan make:model post

## php artisan tinker 
ne işe yarar =>
Shell for laravel kısaca :: Burdan komutlar çalıştırılır. :: Debug yapılır application için
-- console'dan mesela kullanıcı üretimi bile sağlayabilir . => illa direkt gidip form doldurmaya gerek yoktur.
-- test için mesela dumy userlar gömme vs.

mesela bir tablodaki kayıt sayısını almak
App\Models\User::count()

Unutma burda namespace giryorsun hangi tablo hakkında bilgi çekmek istiyorsan

$$$ reminder -> factories = dummy data üretmek için bir factory yazılmış olabilir burdaki database\factories altında görürsün

# tinker ile dummy user uretmek factory aracılığı ile
App\Models\User::factory(10)->create();

# 10 tane kayıt üretcek

-- date değerini görmek çünkü laravelde locale değeri vardır
date('d-M-Y')

## tüm route listesini görmek
php artisan route:list

## neden blade template kullanmalıyız ?
direkt .php uzantılı olanlarda bir şey yazdırcağımız zaman sürekli php tagı aç kapat yapmamız gerekmekte ancak blade sayesinde hazır directive kullanırız @if gibi vs. ASP ile aynı mantık ordada vardı blade template

## stack ile yield hemen hemen aynı ancak kullanımları farklı stackleri daha çok sayfa altında vs. ihtiyaç duyulan yerde kullanıyoruz ancak yield tek bir yer spesifiktir ve extend ile kullanıyoruz.
$ stacki pushlamak gerek unutma !

### Single Action Controller
php artisan make:controller SingleActionController --invokable

## Resource controller oluşturmak // CRUD işlemleri vs. oto gelir predefined methods (( markdown ))
php artisan make:controller BlogController -r

-- sonra bunu register etmen gerek oto algılar metodları
Route::resource('/blog', BlogController::class);

## migration olusturmak artisan ile
php artisan make:migration create_blogs_table
-- bunu uygulamak php artisan migrate

## migration komutları
---
migrate
  migrate:fresh             Drop all tables and re-run all migrations
  migrate:install           Create the migration repository
  migrate:refresh           Reset and re-run all migrations
  migrate:reset             Rollback all database migrations
  migrate:rollback          Rollback the last database migration
  migrate:status            Show the status of each migration
---

------ Laravel oluşturduğun model'e göre otomatik migration oluşturur sadece ismi düzgün versen yeter yoksa yeniden tanımlama yapman gerekir
--> model ismi Blog ise tablo blogs olmalıdır ....
# artisan ile model oluşturmak
php artisan make:model Blog

## Custom model olusturmak ve db ile eşlemek
$ php artisan make:model MyModel
- model içinde şunu ekle ( protected $table = 'blogs'; )

## seeder oluturmak artisan ile ( Önerilen isimlendirme aynı bu şekil model_name+seeder )
php artisan make:seeder UserSeeder

-- Oluşturduğun seederi ana seeder olan DatabaseSeeder'a gömmen gerek
- ekle bunu
$this->call(UserSeeder::class);

--> son olarak seedi seslemek
php artisan db:seed

## factories dummy data generator olarak sıkça kullanıyoruz.
## factory olusturmak
php artisan make:factory MyBlogFactory

- olusturduktan sonra ana seeder'da create yapacaksın
$ php artisan db:seed

#### tinker'dan üretmek
App\Models\MyBlog::factory(10)->create();

## direkt table için migration oluşturmak
php artisan make:migration add_new_columns_to_blogs --table=blogs

-- verileri silmeden yeni sutun eklemek
Şu şekil migration'a eklemek gerek up metodu içine

Schema::table('blogs', function (Blueprint $table) {
    // id sutununun altına eklicek demek
    // default() ile default değerde verilebilir
    $table->string('author')->nullable()->after('id');
});

** burdaki asıl mevzu nullable olması diye düşünüyorum bu şekilde sorunsuz bir update yapabiliyoruz.

-- yeni migration'dan sonra bunları yapman gerektiğini unutma çünkü php artisan migrate:refresh tüm verileri düşürcek şekilde oluşturur db'i
- bundan sonra son işlem olarak
$ php artisan migrate
- çalıştırman yetecektir

## model olusturken migration'ınında oluşması aynı anda
php artisan make:model Product -m

--** model içinde use HasFactory; bu olmazsa factory çalışmaz

## soft delete silme işlemi yapmadan deleted_at değeri girer (default olarak nulldır)
$table->softDeletes();
yeni migration'da bunu eklersin

- sonrasında model class'ta => use SoftDeletes


# laravel çok gelişmiş bir framework öyleki errorları direkt yakalayım vs. uğraşmıyorsun direkt parametre olarak varsa al diyorsun yapı :

@if ($errors->any())
            @foreach ($errors->all() as $error)
                {{ $error }}
            @endforeach
        @endif

# request oluşturmak
php artisan make:request ContactStoreRequest
- request içine hem kuralları hemde custom mesajları yazarız ve ilgili fonksiyon default request yerine bunu sesleriz

## FILE Storage Types
- public storage, dosyaları herkesin erişebileceği şekilde saklarken, local storage yalnızca uygulama içinden erişilebilen özel bir dizinde saklar.
- Mesela bir satıcının ürünler için yüklediği pdf vs. onun değişebileceği şekilde olması için localde.

# klosorler arası link oluşturmak ( public folder altına gider bu link )
php artisan storage:link
- bu storage'ın public klosorunu linkler
-> erişmek
http://localhost:8000/storage/MVD0Dpp6oqWWrg4Dukm3C8cNFqHBAPXMMkzEwAa1.txt

# linki kaldırmak
php artisan storage:unlink

## pathlere erişmek ve değiştirmek
config->filesystems.php

burda local'de public'de vs. nereye bakacağını gösterebilirsin.

### HARIKA extension (FAKE FILLER) oto dolduruyor inputları --- input alanına sağ tıkla input all yaparsın
https://chromewebstore.google.com/detail/fake-filler/bnjjngeaknajbdcgpfkgnonkmififhfo?pli=1

## onceki veriyi dusurmeden migration almak ve uygulamak (soft delete eklencek customer'a)
php artisan make:migration add_soft_delete_customers_table --table=customers

-- olusan yeni migration'da eklersin (up ve down metodlarının ikisinide
)
$table->softDeletes();

# DB ilişkili tasarım elequent'te illa foreign key olmak zorunda değil bu tanımda olur
$table->unsignedBigInteger('imageable_id');
$table->string('imageable_type'); => App/Model/Users gibi

sonra bunu uygunca image içinde tanımlaman 

# artisan ile middleware olusturmak
php artisan make:middleware CheckRole

# Middleware direkt route'da ya da local controllerda ya da genelde bootstrap (global) altında tanımlanabilir.

* Global
->withMiddleware(function (Middleware $middleware) {
    $middleware->append(CheckRole::class);
})

# authentication için laravel breeze kullanılabilir.
composer require laravel/breeze --dev
php artisan breeze:install

* ayarlar
- blade with alpine
- dark mode 'no'
- PHPUnit

php artisan migrate
npm install
npm run dev  - ya da - npm run build

- son ikiye gerek yok ama değişmek istersen npm ile run edersin düzenlerken güzelce görürsün
- şimdi http://localhost:8000/ girince sağ üstte login register görürsün artık
#

# Email verification istersen user'a (modelde)
implements MustVerifyEmail eklenmelidir
-- maili düzgün ayarlarsan bu mailde gönderir
- mail ayarını .env içinde yaparsın mail sunucusunu ver yeter

# Gate oluşturmak -->  aynı middleware gibi ama farklı
app -> providers -> AppServiceProvider -> boot altına tanımla

# Policy oluşturmak (--model belirterek resource policy gibi oluyor)
php artisan make:policy PostPolicy --model=Post

# mail için .env değiştirmek
MAIL_MAILER=smtp
MAIL_SCHEME=null
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=your@gmail.com
MAIL_PASSWORD=your_passsword
MAIL_FROM_ADDRESS="laravel_sucks@gmail.com"
MAIL_FROM_NAME="${APP_NAME}"

# mail classı oluşturmak
php artisan make:mail SendMail

# views/mail/demo-mail.blade.php olutştur html mail göndercez
-- harika mailler gönderebiliyoruz dinamik // Harika bir şekilde attachment ekleyebiliyoruz.

# queue ile çalışmak
- default db'de jobları gördük ama buraya yazıyor jobi işliyor ve siliyor
- queue workeri çalıştırmak
$ php artisan queue:work

* mail gönderirken queue kullandık bak istersen
=> Queue worker harika !

* larAVeL altında
# Component oluşturmak
php artisan make:component Alert
- bu app/View/Components/Alert.php 'i oluşturur
- aynı şekilde resources/views/components/alert.blade.php'i

# eğer view istemiyorum sadece component olsun dersen
php artisan make:component Forms/Link --inline
- bu direkt component içinde blade yazmanı sağlıyor

# üretilmiş component için view oluşturmak - ya da anonymous view oluşturmak
php artisan make:component forms.button --view

# Blade Components
<x-alert /> => @include gibi çalışır
- <x-alert /> component alerti sesliyor

# laravel debugger paketi
composer require barryvdh/laravel-debugbar --dev

# laravelde cache nasıl çalışır ? ( ya DB'de ya da file olarak )
- Basitçe veritabanında cache tablosu altına yazılır cache tutulacaklar süre bittiğinde ise silinirler
- eğer storage ayarlanırsa CACHE_STORE=file olursa localde tutacaktır (.env)
CACHE_STORE=file
yap
-- bulunduğu yer => storage / framework / cache / data

-- ECommerce Cart Project
* breeze kullanılacak
composer require laravel/breeze --dev
php artisan breeze:install


öncelikle auth için seed oluşturduk artisan aracılığı ile sonra database seede gömdük sonra sesledik  php artisan db:seed

####### QUEUE
- önce bir job tanımlamak lazım
php artisan make:job SendWelcomeEmail

- kod yazma işi bittikten sonra (mail vs.)
php artisan queue:work
* bu da çalışmalı aynı zamanda

####### OBSERVERS
- Laravel Observer, Eloquent modellerinin belirli olaylarını (örneğin, oluşturma, güncelleme, silme) dinleyerek, bu olaylar gerçekleştiğinde otomatik olarak belirli işlemleri tetiklemeye yarayan bir yapı sağlar. Bu sayede model ile ilgili işlemleri merkezi bir noktada yönetebilir ve kodunuzu daha düzenli tutabilirsi

# observer oluşturmak
php artisan make:observer PostObserver --model=Post

* görüldüğü üzerinde observer dosyasında resource dosyası ile ilerlemek daha mantıklı olacaktır

# en iyi programı izleme yolu
dd()

# Observeri register etmen gerek appservice provider boot altına
        Post::observe(PostObserver::class);
şeklinde

###### EVENTS

# event oluşturmak
php artisan make:event PostCreateEvent

###### Listener

- bu sana sorular sorar onlara cevap verirsin
php artisan make:listener

- listener ile event eşlenirse otomatik oda seslenecektir

######## BROADCASTING
🌐 WebSocket Nedir?
İki yönlü (client ↔ server) gerçek zamanlı bağlantıdır.
HTTP gibi tek seferlik değil, sürekli açık bir bağlantı kurar.
Örneğin: Bir kullanıcı mesaj gönderince anında diğer kullanıcılara düşmesi.

💥 Laravel + WebSocket
Laravel Broadcasting, WebSocket kullanarak olayları anlık iletir. Laravel’de bunu sağlamak için:

🧩 1. Laravel Echo (JS tarafı)
Frontend'de WebSocket olaylarını dinlemek için.

🧩 2. Pusher veya Soketi (Backend tarafı)
WebSocket sunucusu görevi görür.

🔁 Yayın Akışı (Özet):
Laravel’de bir event tanımlarsın → örnek: NewMessageSent

CHANNEL TYPES
Public = Herkes katılabilir
Private = bir authentication ister
Presence = Karşıdaki kişi aktif mi kontrolu yapar

Bu event kanal üzerinden yayınlanır (broadcast).

WebSocket sunucusu (Pusher/Soketi) bu yayını alır.

Frontend'de Echo ile bu kanal dinlenir.

Olay gerçekleştiğinde anında kullanıcıya gösterilir.

Kısaca: Broadcasting = Event + Channel + WebSocket
Bu üçlü ile Laravel uygulaman gerçek zamanlı çalışır 🚀

İstersen küçük bir örnekle özet geçebilirim. Devam edelim mi?

MAKALE : https://laravel.com/docs/11.x/broadcasting

--> Öncelikle pusher'da oturum açmamız gerekiyor
https://dashboard.pusher.com/accounts/sign_up

- tempmail ile hesap açtım

* f.em.alen.ichoals6.3.0.5@gmail.com
* kardanadam1

- yeni uygulama oluştur channels'ta
laravel-chat

- create app yap
chat-app

- frontend
Jquery

- backend
Laravel

* app-keys kısmından alırsın credentials'i
app_id = "1970986"
key = "a025328a9f66263a89ac"
secret = "fba5d486c10f58535ce0"
cluster = "eu"

### PROJE TARAFI
# broadcasting için gerekli olanlar
php artisan install:broadcasting

- no
- yes
- yes

# pusher için gerekli
composer require pusher/pusher-php-server

# Env içine eklencekler tabi değişerek
PUSHER_APP_ID="your-pusher-app-id"
PUSHER_APP_KEY="your-pusher-key"
PUSHER_APP_SECRET="your-pusher-secret"
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME="https"
PUSHER_APP_CLUSTER="mt1"

-- BROADCAST_CONNECTION=pusher yap


# npm paketi client side
npm install --save-dev laravel-echo pusher-js

# resources > js > echo.js içeriği tamamen değişcek
import Echo from 'laravel-echo';

import Pusher from 'pusher-js';
window.Pusher = Pusher;

window.Echo = new Echo({
    broadcaster: 'pusher',
    key: import.meta.env.VITE_PUSHER_APP_KEY,
    cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER,
    forceTLS: true
});

# .env içine şunlarıda ekle
VITE_APP_NAME="${APP_NAME}"
VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

# npm run build yap
-- paketleri sudo ile yükledim ondan bunuda sudo ile çalıştırman gerekli

-- kullanıcağın input dosyaları vite.config.js içinde olamlıdır
            input: ['resources/css/app.css', 'resources/js/app.js','resources/js/echo.js'],

-- buraya ekleme yaptıktan sonra seslemeyi unutma
npm run build

# google'da vs. tarayıcılarda görmek WEB SOCKET'i
network -> settings -> WS

# burda izleyebilirsin console'dan PUSHER'dan
https://dashboard.pusher.com/apps/1970986/console

# test event
php artisan make:event NewMessage

-- burda aslında messajı queue'a alıyor bunun için öncesinde default olarak o var zaten queue'a alıyor onuda db'e yazıyor
php artisan queue:work
- ama bunu kullanma

# onun yerine .env içinde
QUEUE_CONNECTION=sync

# öncelikle projeye breeze ekle
onu unutma

# direkt sürekli vite configi değişmek yerine şunu app.js'e ekleyebiliriz
import './echo.js';
- ama o zaman sayfada bunu seslemen gerek
    @vite('resources/js/app.js')

###
npm run dev ile sürekli build almana gerek kalmaz o zaten değişikleri oto algılıyor

- mantık bu broadcasting'te
private chatler var ve birden fazla channel var herkesin kendine özgü olcak şekilde. Bradcaster 1 tane bu channellar oraya bağlı oluyorlar.

## Chat-app'te

- beraber çalışmalılar
php artisan serve
npm run dev


-> service provider
Providers -> AppServiceProvider

-> yeni provider oluşturmak
php artisan make:provider TestServiceProvider

- register etmek lazım
bootstrat -> providers.php

- register ettikten sonra ilgili servici şu şekil kullanmak serbest oluyor
Route::get('get', function() {
    echo app()->make('test_service');
});

-> classlar aracılığı ile facade tanımlamak
provider + service + facade  === bu yapıyı kullandık

-> trait oluşturmak
php artisan make:trait Traits/ImageUpload 

-> helper functions
* uygulamanın her yerinden erişebiliriz

*** Autoload'a eklemen gerek composer.json içinde
,
        "files": [
            "app/Helpers/helper.php"
        ]

sonra çalıştır
composer du

- global function seslemek
makeSlug("Buğra Wick");

-> route model bindings
php artisan make:model Product -m

-> burda direkt string $id yerine Product $product istiyoruz
php artisan make:controller TestProductController --resource --model=Product

- direkt istediğimiz şekilde gelir

##### LOCALIZATION

# bunu yapınca lang -> en üretir ve altındakiler
php artisan lang:publish

# yeni bir dil ekle anahtarlar aynı olmalı ama !
sonra config altında app.php içinde

    'locale' => env('APP_LOCALE', 'en'),
değiş burayı

değilmiş !!!!
.env'de 
APP_LOCALE=tr
yaptım

bulamazsa en çağırır
APP_LOCALE=tr
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US

## artisan console

-> Localization klosoru altında yaptım örnekleri

- db kontrolu
php artisan db:monitor

- komut oluşturmak
php artisan make:command CreateUserCommand
bu oluşturur
Console command [app/Console/Commands/CreateUser.php] created successfully.  

- parametre alcak şekilde yazdığımdan - isteğe bağlı yaptım -- ayrıca option
php artisan app:create-user Grant
php artisan app:create-user --message="xd"

-- 
php artisan app:create-user      

 What is your name?:
 > Grant

hello Grant
