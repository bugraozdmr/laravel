#############  COURSE #############

-- GEREKLILIKLER
/*
COMPOSER
XAMPP
VS CODE
*/

// yeni keyboard zorluyor :D %60 almayın :/

## Extensions
- Laravel extension Pack (GENEL olarak çok fazla şey içeriyor iyidir DOTENV...)
- Laravel Blade Spacer ( Code formatlama için gerekli )
- PHP Intelephense

#-# extension pack ile gelen birkaç extension siliniyor :: DevDb gereksiz, EditorConfig for VS Code gereksiz

## .vscode ile custom configuration eklemiş oluyoruz ( Daha fazla ayar eklenebilir )
Burda font size ayarı vs. iyi

#### COMPOSER LARAVEL PROJE OLUSTURMA --> bu composer ile projeyi indirir
composer create-project laravel/laravel example-app

## projeyi çalıştırmak (once cd ile icine gir)
php artisan serve

## LARAVEL default olarak sqlite ile gelir
.env içinde driver'i değiştir mysql ile aynı şu şekil
#####
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3307
DB_DATABASE=laravel
DB_USERNAME=grant
DB_PASSWORD=grant345
#####

# Sonra seedi insert etmek gerek ( kokte olman gerektigini unutma )
php artisan migrate

# php artisan çokça komuta sahip bunları kullanmak işimizi baya bir kolaylaştırır
- php artisan yapıp enterlayınca tüm komutları listelemiş oluruz
- php about ile uygulama hakkında tüm bilgiler gelir
- inspire ile güzel sözler çeker

# sevdiğim komutlar
- php artisan about
- php artisan inspire

# yeni bir view oluşturma
php artisan make:view home

# klosor altında view olusturma (klosor var olmak zorunda değil)
php artisan make:view about/index

# yeni controller oluşturma
php artisan make:controller HomeController

## Yeni model oluşturma artisan kullanarak
php artisan make:model post

## php artisan tinker 
ne işe yarar =>
Shell for laravel kısaca :: Burdan komutlar çalıştırılır. :: Debug yapılır application için
-- console'dan mesela kullanıcı üretimi bile sağlayabilir . => illa direkt gidip form doldurmaya gerek yoktur.
-- test için mesela dumy userlar gömme vs.

mesela bir tablodaki kayıt sayısını almak
App\Models\User::count()

Unutma burda namespace giryorsun hangi tablo hakkında bilgi çekmek istiyorsan

$$$ reminder -> factories = dummy data üretmek için bir factory yazılmış olabilir burdaki database\factories altında görürsün

# tinker ile dummy user uretmek factory aracılığı ile
App\Models\User::factory(10)->create();

# 10 tane kayıt üretcek

-- date değerini görmek çünkü laravelde locale değeri vardır
date('d-M-Y')

## tüm route listesini görmek
php artisan route:list

## neden blade template kullanmalıyız ?
direkt .php uzantılı olanlarda bir şey yazdırcağımız zaman sürekli php tagı aç kapat yapmamız gerekmekte ancak blade sayesinde hazır directive kullanırız @if gibi vs. ASP ile aynı mantık ordada vardı blade template

## stack ile yield hemen hemen aynı ancak kullanımları farklı stackleri daha çok sayfa altında vs. ihtiyaç duyulan yerde kullanıyoruz ancak yield tek bir yer spesifiktir ve extend ile kullanıyoruz.
$ stacki pushlamak gerek unutma !

### Single Action Controller
php artisan make:controller SingleActionController --invokable

## Resource controller oluşturmak // CRUD işlemleri vs. oto gelir predefined methods (( markdown ))
php artisan make:controller BlogController -r

-- sonra bunu register etmen gerek oto algılar metodları
Route::resource('/blog', BlogController::class);

## migration olusturmak artisan ile
php artisan make:migration create_blogs_table
-- bunu uygulamak php artisan migrate

## migration komutları
---
migrate
  migrate:fresh             Drop all tables and re-run all migrations
  migrate:install           Create the migration repository
  migrate:refresh           Reset and re-run all migrations
  migrate:reset             Rollback all database migrations
  migrate:rollback          Rollback the last database migration
  migrate:status            Show the status of each migration
---

------ Laravel oluşturduğun model'e göre otomatik migration oluşturur sadece ismi düzgün versen yeter yoksa yeniden tanımlama yapman gerekir
--> model ismi Blog ise tablo blogs olmalıdır ....
# artisan ile model oluşturmak
php artisan make:model Blog

## Custom model olusturmak ve db ile eşlemek
$ php artisan make:model MyModel
- model içinde şunu ekle ( protected $table = 'blogs'; )

## seeder oluturmak artisan ile ( Önerilen isimlendirme aynı bu şekil model_name+seeder )
php artisan make:seeder UserSeeder

-- Oluşturduğun seederi ana seeder olan DatabaseSeeder'a gömmen gerek
- ekle bunu
$this->call(UserSeeder::class);

--> son olarak seedi seslemek
php artisan db:seed

## factories dummy data generator olarak sıkça kullanıyoruz.
## factory olusturmak
php artisan make:factory MyBlogFactory

- olusturduktan sonra ana seeder'da create yapacaksın
$ php artisan db:seed

#### tinker'dan üretmek
App\Models\MyBlog::factory(10)->create();

## direkt table için migration oluşturmak
php artisan make:migration add_new_columns_to_blogs --table=blogs

-- verileri silmeden yeni sutun eklemek
Şu şekil migration'a eklemek gerek up metodu içine

Schema::table('blogs', function (Blueprint $table) {
    // id sutununun altına eklicek demek
    // default() ile default değerde verilebilir
    $table->string('author')->nullable()->after('id');
});

** burdaki asıl mevzu nullable olması diye düşünüyorum bu şekilde sorunsuz bir update yapabiliyoruz.

-- yeni migration'dan sonra bunları yapman gerektiğini unutma çünkü php artisan migrate:refresh tüm verileri düşürcek şekilde oluşturur db'i
- bundan sonra son işlem olarak
$ php artisan migrate
- çalıştırman yetecektir

## model olusturken migration'ınında oluşması aynı anda
php artisan make:model Product -m

--** model içinde use HasFactory; bu olmazsa factory çalışmaz

## soft delete silme işlemi yapmadan deleted_at değeri girer (default olarak nulldır)
$table->softDeletes();
yeni migration'da bunu eklersin

- sonrasında model class'ta => use SoftDeletes


# laravel çok gelişmiş bir framework öyleki errorları direkt yakalayım vs. uğraşmıyorsun direkt parametre olarak varsa al diyorsun yapı :

@if ($errors->any())
            @foreach ($errors->all() as $error)
                {{ $error }}
            @endforeach
        @endif

# request oluşturmak
php artisan make:request ContactStoreRequest
- request içine hem kuralları hemde custom mesajları yazarız ve ilgili fonksiyon default request yerine bunu sesleriz

## FILE Storage Types
- public storage, dosyaları herkesin erişebileceği şekilde saklarken, local storage yalnızca uygulama içinden erişilebilen özel bir dizinde saklar.
- Mesela bir satıcının ürünler için yüklediği pdf vs. onun değişebileceği şekilde olması için localde.

# klosorler arası link oluşturmak ( public folder altına gider bu link )
php artisan storage:link
- bu storage'ın public klosorunu linkler
-> erişmek
http://localhost:8000/storage/MVD0Dpp6oqWWrg4Dukm3C8cNFqHBAPXMMkzEwAa1.txt

# linki kaldırmak
php artisan storage:unlink

## pathlere erişmek ve değiştirmek
config->filesystems.php

burda local'de public'de vs. nereye bakacağını gösterebilirsin.

### HARIKA extension (FAKE FILLER) oto dolduruyor inputları --- input alanına sağ tıkla input all yaparsın
https://chromewebstore.google.com/detail/fake-filler/bnjjngeaknajbdcgpfkgnonkmififhfo?pli=1

## onceki veriyi dusurmeden migration almak ve uygulamak (soft delete eklencek customer'a)
php artisan make:migration add_soft_delete_customers_table --table=customers

-- olusan yeni migration'da eklersin (up ve down metodlarının ikisinide
)
$table->softDeletes();

# DB ilişkili tasarım elequent'te illa foreign key olmak zorunda değil bu tanımda olur
$table->unsignedBigInteger('imageable_id');
$table->string('imageable_type'); => App/Model/Users gibi

sonra bunu uygunca image içinde tanımlaman 

# artisan ile middleware olusturmak
php artisan make:middleware CheckRole

# Middleware direkt route'da ya da local controllerda ya da genelde bootstrap (global) altında tanımlanabilir.

* Global
->withMiddleware(function (Middleware $middleware) {
    $middleware->append(CheckRole::class);
})

# authentication için laravel breeze kullanılabilir.
composer require laravel/breeze --dev
php artisan breeze:install

* ayarlar
- blade with alpine
- dark mode 'no'
- PHPUnit

php artisan migrate
npm install
npm run dev  - ya da - npm run build

- son ikiye gerek yok ama değişmek istersen npm ile run edersin düzenlerken güzelce görürsün
- şimdi http://localhost:8000/ girince sağ üstte login register görürsün artık
#

# Email verification istersen user'a (modelde)
implements MustVerifyEmail eklenmelidir
-- maili düzgün ayarlarsan bu mailde gönderir
- mail ayarını .env içinde yaparsın mail sunucusunu ver yeter

# Gate oluşturmak -->  aynı middleware gibi ama farklı
app -> providers -> AppServiceProvider -> boot altına tanımla

# Policy oluşturmak (--model belirterek resource policy gibi oluyor)
php artisan make:policy PostPolicy --model=Post
